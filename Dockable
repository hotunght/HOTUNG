using System;
using System.Reflection;
using Autodesk.Revit.Attributes;
using Autodesk.Revit.DB;
using Autodesk.Revit.UI;
using Autodesk.Revit.UI.Events;
using DockableDialog.Forms;
using DockableDialog.Properties;

namespace DockableDialog
{
  public class Ribbon : IExternalApplication
  {
    public Result OnStartup( UIControlledApplication a )
    {
      a.CreateRibbonTab( "FAMILY" );
      RibbonPanel AECPanelDebug = a.CreateRibbonPanel( "FAMILY", "FAMILY" );
      string path = Assembly.GetExecutingAssembly().Location;

      #region DockableWindow
      PushButtonData pushButtonRegisterDockableWindow = new PushButtonData( "ĐĂNG KÝ", "ĐĂNG KÝ GUI", path, "DockableDialog.RegisterDockableWindow" );
      pushButtonRegisterDockableWindow.LargeImage = GetImage( Resources.green.GetHbitmap() );
      pushButtonRegisterDockableWindow.AvailabilityClassName = "DockableDialog.AvailabilityNoOpenDocument";
      PushButtonData pushButtonShowDockableWindow = new PushButtonData( "HIỆN TABLE", "HIỆN TABLE", path, "DockableDialog.ShowDockableWindow" );
      pushButtonShowDockableWindow.LargeImage = GetImage( Resources.red.GetHbitmap() );
      RibbonItem ri1 = AECPanelDebug.AddItem( pushButtonRegisterDockableWindow );
      RibbonItem ri2 = AECPanelDebug.AddItem( pushButtonShowDockableWindow );
      #endregion

      return Result.Succeeded;
    }

    public Result OnShutdown( UIControlledApplication a )
    {
      return Result.Succeeded;
    }

    private System.Windows.Media.Imaging.BitmapSource GetImage( IntPtr bm )
    {
      System.Windows.Media.Imaging.BitmapSource bmSource = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap( bm,
              IntPtr.Zero,
              System.Windows.Int32Rect.Empty,
              System.Windows.Media.Imaging.BitmapSizeOptions.FromEmptyOptions() );

      return bmSource;
    }
  }
   
    public class AvailabilityNoOpenDocument : IExternalCommandAvailability
  {
    public bool IsCommandAvailable(
      UIApplication a,
      CategorySet b )
    {
      if( a.ActiveUIDocument == null )
      {
        return true;
      }
      return false;
    }
  }

  [Transaction( TransactionMode.Manual )]
    /// <summary>
    public class RegisterDockableWindow : IExternalCommand
    {
        MainPage m_MyDockableWindow = null;

        public Result Execute(
          ExternalCommandData commandData,
          ref string message,
          ElementSet elements)
        {
            DockablePaneProviderData data = new DockablePaneProviderData();
            MainPage MainDockableWindow = new MainPage();
            m_MyDockableWindow = MainDockableWindow;
            data.FrameworkElement = MainDockableWindow as System.Windows.FrameworkElement;
            data.InitialState = new DockablePaneState();
            data.InitialState.DockPosition = DockPosition.Tabbed;
            data.InitialState.TabBehind = DockablePanes.BuiltInDockablePanes.ProjectBrowser;
            DockablePaneId dpid = new DockablePaneId(new Guid("{D7C963CE-B7CA-426A-8D51-6E8254D21157}"));
            commandData.Application.RegisterDockablePane(dpid, "DANH SÁCH", MainDockableWindow as IDockablePaneProvider);
            commandData.Application.ViewActivated += new EventHandler<ViewActivatedEventArgs>(Application_ViewActivated);
            return Result.Succeeded;
        }

        void Application_ViewActivated( object sender, ViewActivatedEventArgs e )
    {
      
    }
  }
    [Transaction(TransactionMode.Manual)]
    public class ShowDockableWindow : IExternalCommand
    {
        public Result Execute(
          ExternalCommandData commandData,
          ref string message,
          ElementSet elements)
        {
            DockablePaneId dpid = new DockablePaneId(new Guid("{D7C963CE-B7CA-426A-8D51-6E8254D21157}"));
            DockablePane dp = commandData.Application.GetDockablePane(dpid);
            dp.Show();
            return Result.Succeeded;
        }
    }

}
